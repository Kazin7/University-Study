system call :  프로그램이 자신이 처리하기 힘든 문제를 운영체제에게 도움을 청하는것
ex)하드디스크에서 파일을 읽어오는 것
이런 호출을 trap이라고한다

polling : 컴퓨터가 자신이 연결되있는 모든것을 순회하면서 확인하는것

IOdevice는 평소에 idle상태에 있다가 CPU가 호출시 transferring한다.

CPU = 헤르츠 (1초에 진동하는 횟수) 1기가헤르츠 -> 1클럭당 1나노seconds
SSD = 용량
HDD = RPM(1분동안 회전하는 횟수),용량
네트워크 = bps

인터럽트
-하드디스크는 느려서 무시하고있다가 인터럽트를 이용해서 처리한다
-자신이 처리하지못하는 것을 cpu에 도움을 청하는것

트랩
-사용자의 요구에 따라서 발생되는 소프트웨어적 인터럽트

하드웨어 인터럽트
-cpu를 제외한 주변장치에 의해서 일어나는 예외상황
-cpu는 정해진 절차를 따른다

소프트웨어 인터럽트
-cpu는 예외발생시 핸들러를 이용하여 처리한다

밀리세컨드 1000분의1초
마이크로세컨드 백만분의1초 *10^3
나노세컨드 10억분의1초 *10^3

Register
CPUcache
Main memory
disk cache

DMA(direct memory access)
-디바이스가 cpu의 중재없이 버퍼에서 메모리로 직접 전송하는 기술

cache는 일관성 문제가있다.

멀티 프로세서
-cpu가 여러개있는 시스템

멀티 프로세스
-메모리에 프로그램이 여러개 동작하는 것

멀티태스킹
-여러가지 일을 한번에 하는 것

멀티유저 시스템
ex)리눅스

system Call
-운영체제가 제공하는 프로그래밍 인터페이스
-권한이 없는 사용자 프로그램이 권한이 있는 운영체제 내부의 기능을 활용하고자 할때에 사용하는 기법

프로세스가 커널에 데이터를 전달하는 방법
1.레지스터에 저장
2.레지스터에 주소를 저장
3.스택에 넣어서 전달

MSDOS
-프로그램이 1개만 수행되는 단순한 운영체제

FREEBSD
-멀티태스킹이 가능한 운영체제

운영체제 = 커널 + 시스템 프로그램
혼합해서 작성한다
저수준은 assembly
주요부분은 C언어
고급언어로 작성하게되면 port가 쉽다 대신 느리다
emulation 인텔위에 emulator를 올려서 중간에 코드를 해석해준다

*운영체제를 설계함에 있어서 정책과 메커니즘에 대한 개념을 분리해서 이해하여야 함
Policy:   무엇을 하면 되는거지?
Mechanism:  어떻게 하면 되는거지?

마이크로커널
-메시지 패싱방식 속도가 느리다 확장성이 좋다.
-신뢰성이 높고 보안성이 좋다.

Loadable kernel module
-대부분 이 기능을 사용
-주요 기능을 모듈로 만들어 놓고 필요 할때만 메모리에 적재해서 사용한다.

현대 운영체제는 하이브리드 시스템을 사용한다




