오픈소스 : 깃명령어와 개념 , 헤드의 위치 , 브랜치개념 
가버넌스 어떻게하는지 , 라이센스

오픈소스의 특징 : 믿을만하다 , 비용적으로 효과적이다 , 유지가능하다 , 수정가능하다

Committed은 데이터가 로컬 데이터베이스에 안전하게 저장됨을 의미합니다. 
Modified는 파일을 변경했지만 아직 데이터베이스에 커밋하지 않았 음을 의미합니다. 
Staged는 다음 버전의 커밋 스냅 샷으로 이동하기 위해 현재 버전에서 수정 된 파일을 표시했음을 의미합니다.

add 선택내용 스테이지 올리기
commit
push
어떤파일이 병합되지 않았나 git status
proprietary - 상용 소프트웨어에서 가장 많이 사용되는 라이센스 모델
특징 : 자기네 거다
OSS - permissive , copyleft

permissive
상업적 용도로 개방적이다
소스코드의 배포를 요구하지 않는다
MIT License
소스 코드 제공 의무 없음
Apachi
소스코드 제공 의무 없음
copyleft
-GPL2.0 = 모든 재배포는 전체 소스코드를 무료로 이용할 수 있도록 해야한다
다른 라이센스 조건을 무효화 할 수 있다.
-LGPL 

FOSS패키지는 다른 패키지를 번들로 제공한다 라이센스 정보가 올바르지 않을 가능성이있다
라이센스의 충돌이 발생할수 있다
branch는 git에서 특정 시점 이후로 새로 기능을 변경하고 싶을 때 그 시점 이후로
 새로운 저장 고리를 만드는 것으로 가상의 작업 환경을 새로 만드는 것을 말한다

헤드브랜치에 갱신이없고 합치려는 헤드 브랜치로부터 시작되었을때 fastforward

  * 오픈소스 라이센스와 관련된 모든 부분

  * Git, GitHub 활용 전체

정책 취득 적용 작동 -> 관리및 향상후 정책
라이센스의 목적은 라이센스를 통해 오브젝트를 지키기 위해서이다.

아파치
-특허부여 : 라이센스를 제공하도록 요구하는것
-보복 : 소송을 제기한 사람에게 부여된 권리를 철회하는것

특허를 이용해 만든 아파치 소프트웨어는 상업적으로 사용해도 고소안됨
하지만 특허를 사용하면 고소 가능

GPLv2에는 암시적특허권이있다
GNU General Public License, 버전 2(GPLv2)는 소프트웨어 특허에 대한 보호, 즉 특허 사용료 추가 금지, 추가 제한 금지
 암시적 특허 부여를 강화할 수 있는 진술을 포함하고 있다.
-실행할 자유-공부할 자유 -재분배 자유 -개선할 자유

GPLv3에는 명시적 특허권이있다.
이 라이센스를 사용한 경우 로열티 수수료등을 부과할 수 없고 특허청구가 침해된다는
소송도 제기할수 없다.

GPLv2는 아파치와 양립 불가능
GPLv3는 아파치와 양립가능

Update
자신의 계정에서 compare로 들어간뒤 포크뜬것과 원본을 비교한후
업데이트 되었을 경우 풀리퀘스트를 통해 파일을 합병해서 가져온다
SSH
소스트리에서 키를 만든뒤 공개키를 깃허브 레퍼지토리에 세팅에서 deploy keys에서
공개키를 복사해와서 연결한다
Fetch
이 명령은 아직  없는 데이터를 가져오고 , 로컬 데이터베이스를 업데이트하고
오리진 마스터를 최신위치로 이동시킨다4

Fetch vs Pull
fetch명령은 모든 변경사항을 가져오지만 작업 디렉토리를 전혀 수정하지 않는다.
가져온 데이터를 직접 병합해야한다.
하지만 pull명령은 모든 변경사항도 가져오고 병합까지 해준다.

Rebase
변경사항의 패치를 적용하고 다른 곳도 적용하는 것을 리베이스라고한다
그후에 fastforward을 통해 merge할수 있다.
